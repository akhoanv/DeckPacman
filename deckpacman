#!/usr/bin/python3

"""
@Author Khoa Nguyen (Risky)
@Date 2022/05/09
@Links https://github.com/akhoanv/DeckPacman
"""

import argparse
import enum
import os
import subprocess
import json
import requests
import shutil

def main():
    pm = PackageManager()

    arg_parser = argparse.ArgumentParser(description='Install and store packages, designed for Steam Deck to run \
                                                     after firmware update')
    arg_parser.add_argument('--install', type=str, help="Package to be installed")
    arg_parser.add_argument('--add', type=str, help="Add package to list, skip installation")
    arg_parser.add_argument('--installAll', action='store_true', help="Install all stored packages")
    arg_parser.add_argument('--clear', action='store_true', help="Clear list of packages")
    arg_parser.add_argument('--list', action='store_true', help="List all stored packages")

    arg_parser.set_defaults(installAll=False)
    arg_parser.set_defaults(clear=False)
    arg_parser.set_defaults(list=False)

    args = arg_parser.parse_args()
    if args.install is not None:
        pm.install(choosePkgType(), args.install)
        exit(0)
    elif args.add is not None:
        pm.addPackage(choosePkgType(), args.add)
        exit(0)
    elif args.installAll:
        pm.installAll(True)
        exit(0)
    elif args.clear:
        pm.clearPackages()
        exit(0)
    elif args.list:
        print(pm.listPackages())
        exit(0)


def choosePkgType():
    return input("1: Default\n2: AUR\n3: Flatpak\nChoose type of package (1 - 3): ")


class PackageManager:
    def __init__(self):
        self.AUR_URL = 'https://aur.archlinux.org'
        self.DATA_FILE = './packages.json'
        self.package_info = {
            "packages": {}
        }

        self._parsePackage()

    def installAll(self, isInitial):
        if isInitial:
            print("Disabling SteamOS safe-guard...")
            subprocess.run("steamos-readonly disable", stdout=subprocess.PIPE, shell=True)

            print("\nInitializing keychain...")
            subprocess.run("pacman-key --init", stdout=subprocess.PIPE, shell=True)
            subprocess.run("pacman-key --populate archlinux holo", stdout=subprocess.PIPE, shell=True)

            print("\nInstalling build tools...")
            subprocess.run("pacman -S --needed --noconfirm base-devel", stdout=subprocess.PIPE, shell=True)

        for pkg in self.package_info["packages"].keys():
            print("\nInstalling package " + pkg + "...")
            if int(self.package_info["packages"][pkg]["type"]) == int(PackageType.DEFAULT.value):
                subprocess.run("pacman -S --noconfirm " + pkg, stdout=subprocess.PIPE, shell=True)
            elif int(self.package_info["packages"][pkg]["type"]) == int(PackageType.AUR.value):
                # Create AUR dir for repositories
                if not os.path.isdir("./AUR"):
                    os.makedirs("./AUR", 0o770)

                subprocess.run("cd ./AUR; wget " + self.AUR_URL + self.package_info["packages"][pkg]["url"] +
                                "; tar -xvf " + pkg + ".tar.gz; cd " + pkg + "; makepkg; " +
                                "sudo pacman -U --noconfirm *.pkg.tar.zst", stdout=subprocess.PIPE, shell=True)

                shutil.rmtree('./AUR')



    def install(self, pkg_type, package):
        name = None
        url = None

        if int(pkg_type) == int(PackageType.DEFAULT.value):
            name = package
            os.system("pacman -S --noconfirm " + package)
        elif int(pkg_type) == int(PackageType.AUR.value):
            pkgChooser = self._chooseAUR(package)
            name = pkgChooser["Name"]
            url = pkgChooser["URLPath"]

            # Create AUR dir for repositories
            if not os.path.isdir("./AUR"):
                os.makedirs("./AUR", 0o770)

            subprocess.run("cd ./AUR; wget " + self.AUR_URL + pkgChooser["URLPath"] +
                           "; tar -xvf " + name + ".tar.gz; cd " + name + "; makepkg; " +
                           "sudo pacman -U --noconfirm *.pkg.tar.zst", stdout=subprocess.PIPE, shell=True)

            shutil.rmtree('./AUR')

        self.addPackage(pkg_type, name, url=url)

    def addPackage(self, pkg_type, package, url=None):
        pkg_prop = {}
        pkg_name = ""

        if int(pkg_type) == int(PackageType.DEFAULT.value):
            pkg_name = package
            pkg_prop["type"] = PackageType.DEFAULT.value
        elif int(pkg_type) == int(PackageType.AUR.value):
            pkg_prop["type"] = PackageType.AUR.value
            if url is None:
                pkgChooser = self._chooseAUR(package)
                pkg_name = pkgChooser["Name"]
                pkg_prop["url"] = pkgChooser["URLPath"]
            else:
                pkg_name = package
                pkg_prop["url"] = url

        if pkg_name not in self.package_info["packages"] or int(self.package_info["packages"][pkg_name]["type"]) == pkg_type:
            self.package_info["packages"][pkg_name] = pkg_prop
            self._exportJson()

    def listPackages(self):
        pkgStr = "List of packages:\n"

        for pkg in self.package_info["packages"].keys():
            pkgStr = pkgStr + pkg + " [" + PackageType(int(self.package_info["packages"][pkg]["type"])).name + "]\n"

        return pkgStr

    def clearPackages(self):
        self.package_info = {
            "packages": {}
        }

        print("List of packages were cleared\n")

        self._exportJson()

    def _parsePackage(self):
        if not os.path.exists(self.DATA_FILE):
            self._exportJson()

        f = open(self.DATA_FILE)
        self.package_info = json.load(f)

        f.close()

    def _exportJson(self):
        with open(self.DATA_FILE, "w") as output:
            json.dump(self.package_info, output)

    def _chooseAUR(self, package):
        req = requests.get(url = (self.AUR_URL + "/rpc/?v=5&type=search&arg=" + package))
        aurData = req.json()

        prompt = "\n"

        for i in range(int(aurData["resultcount"])):
            prompt = prompt + str(i) + ": " + aurData["results"][i]["Name"] + "\n" \
                "   |_ Description: " + aurData["results"][i]["Description"] + "\n" \
                "   |_ Maintainer: " + aurData["results"][i]["Maintainer"] + "\n" \
                "   |_ Version: " + aurData["results"][i]["Version"] + "\n" \
                "   |_ URL: " + (aurData["results"][i]["URL"] or "None") + "\n" \
                "   |_ Votes: " + str(aurData["results"][i]["NumVotes"]) + "\n\n"

        prompt = prompt + "Choose package from list (0 - " + str(aurData["resultcount"] - 1) + "): "
        choice = input(prompt)

        return aurData["results"][int(choice)]


class PackageType(enum.Enum):
    DEFAULT = 1
    AUR = 2
    FLATPAK = 3

if __name__ == "__main__":
    main()
